# tutorial 9 - https://www.youtube.com/watch?v=-qiQm-_aAMg&index=9&list=PLZ7s-Z1aAtmIbaEj_PtUqkqdmI1k7libK
#creating labels and annotations
import numpy as np
import pandas as pd
from pandas import Series, DataFrame
import matplotlib.pyplot as plt
from pylab import rcParams
import seaborn as sb
%matplotlib inline
rcParams['figure.figsize']=5,4
sb.set_style("whitegrid")
# labelling plot features
# the functional method
x=range(1,10)
y=[1,2,3,4,5,4,3,2,1]
plt.bar(x,y)
plt.xlabel("your x-axis label")
plt.ylabel("your y-axis label")
z=[1,2,3,4,5]
veh_type=["bicycle","motorbike","car","bus","truck"]
plt.pie(z,labels=veh_type)
plt.show()
# the object oriented method
address="C:/Users/uidj1620/Documents/R/R-3.4.3/library/readr/extdata/mtcars.csv"
cars=pd.read_csv(address)
cars.columns=["mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb"
]
mpg = cars.mpg
fig = plt.figure()

ax = fig.add_axes([.1,.1,1,1])
mpg.plot()
ax.set_xticks(range(32))
ax.set_xticklabels(cars.mpg, rotation=60,fontsize="medium")
ax.set_title('Miles per gallon of cars in mtcars')
ax.set_xlabel('cars_names')
ax.set_ylabel('miles/gallon')
#adding a legend
plt.pie(z)
plt.legend(veh_type, loc="best")
# add a legend using object riented method
fig= plt.figure()
mpg = cars.mpg
ax = fig.add_axes([.1,.1,1,1])
mpg.plot()
ax.set_xticks(range(32))
ax.set_xticklabels(cars.mpg, rotation=60,fontsize="medium")
ax.set_title('Miles per gallon of cars in mtcars')
ax.set_xlabel('cars_names')
ax.set_ylabel('miles/gallon')
ax.legend(loc="best")
#annotate your plot
mpg.max()

fig= plt.figure()

ax = fig.add_axes([.1,.1,1,1])
mpg.plot()

ax.set_xticklabels(cars.mpg, rotation=60,fontsize="medium")
ax.set_title('Miles per gallon of cars in mtcars')

ax.set_ylabel('miles/gallon')
ax.set_ylim([0,45])
ax.annotate("Toyota Corolla",xy(19,33.9),xytext=(21,35),
           arrowprops==dict(facecolor="black",shrink=0.05))
# Tutorial 10 , time series
#creating visualization from time series
import numpy as np
import pandas as pd
from pandas import Series, DataFrame
import matplotlib.pyplot as plt
from pylab import rcParams
import seaborn as sb
from numpy.random import randn
%matplotlib inline
rcParams["figure.figsize"]=5,4
sb.set_style("whitegrid")
#the simplest time series plot
address="C:/Users/uidj1620/Desktop/Datasets for pandas/Superstore-Sales.csv"
df = pd.read_csv(address,  encoding = "ISO-8859-1",index_col="Order Date", parse_dates = True)
df.head
df["Order Quantity"].plot()
df2=df.sample(n=100, random_state=25, axis =0)
plt.xlabel("Order Date")
plt.ylabel("Order Quantity")
plt.title("Superstore Sales")
df2["Order Quantity"].plot()
#tutorial 11    https://www.youtube.com/watch?v=4Rz8cpEw66E&list=PLZ7s-Z1aAtmIbaEj_PtUqkqdmI1k7libK&index=11
# Histograms and Scatterplots
import numpy as np
import pandas as pd
from pandas import Series, DataFrame
from pandas.tools.plotting import scatter_matrix
import matplotlib .pyplot as plt
from pyplot import rcParams
import seaborn as sb

%matplotlib inline
rcParams["figure.figsize"]=5,4
sb.set_style("whitegrid")
# eyeballing dataset distributions with histograms
address="C:/Users/uidj1620/Documents/R/R-3.4.3/library/readr/extdata/mtcars.csv"
cars=pd.read_csv(address)
cars.columns=["mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb"
]
mpg = cars["mpg"]
mpg.plot(kind = "hist")
# histogram with seaborn
sb.distplot(mpg)
#scatterplot
cars.plot(kind="scatter", x="hp",y="mpg",c=["darkgrey"],s=100)
sb.regplot(x="hp",y="mpg",data=cars,scatter=True)
#scatterplot matrix
sb.pairplot(cars)
# adding a third dimension
cars_df=pd.DataFrame((cars.ix[:,(1,3,4,6)].values),columns=["mpg","disp","hp","wt"])
cars_target= cars.iloc[:,9]
target_names=[0,1]
cars_df["group"]=pd.Series(cars_target,dtype="category")
sb.pairplot(cars_df,hue="group",palette="hls")
#boxplot
cars.boxplot(column="mpg",by="am")
cars.boxplot(column="wt",by="am")
# boxplot in seaborn
sb.boxplot(x="am",y="mpg",data=cars,palette="hls")
# multiplication  https://www.youtube.com/watch?v=mAuIRj4O-KM&index=12&list=PLZ7s-Z1aAtmIbaEj_PtUqkqdmI1k7libK
# using numpy for arithmetic operation
import numpy as np
from numpy.random import randn
np.set_printoptions(precision =2)
# creating array
a=np.array([1,2,3,4,5,6])
a
b=np.array([[10,20,30],
           [40,50,60]])
b
# creating array via assignment
np.random.seed(1234)
c=36*np.random.randn(6)
c
d = np.arange(1,35)
d
# arithmetic on array
a*10
c+a
c-a
c*a
c/a
# multiplying matrics and basic linear algebra
aa=np.array(([2.,4.,6.],[1.,3.,5.],[10.,20.,30.]))
aa
bb=np.array(([0.,1.,2.],[3.,4.,5.],[6.,7.,8.]))
bb
aa*bb
np.dot(aa,bb)
# tutorial 13  https://www.youtube.com/watch?v=mWIwXqtZmd8&list=PLZ7s-Z1aAtmIbaEj_PtUqkqdmI1k7libK&index=13
# generating summary statistic
import numpy as np
import pandas as pd
from pandas import Series, DataFrame
import scipy
from scipy import stats
address="C:/Users/uidj1620/Documents/R/R-3.4.3/library/readr/extdata/mtcars.csv"
cars=pd.read_csv(address)
cars.columns=["mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb"
]
cars.head()
# sum of data in a column
cars.sum()
cars.sum(axis=1)
# median
cars.median()
cars.mean()
cars.max()
cars=cars.mpg
mpg.idxmax()
# summary stats of each variable
cars.std()
cars.var()
cars.describe()

