# https://www.youtube.com/watch?v=UIx_B74rcQQ&index=3&list=PLZ7s-Z1aAtmIbaEj_PtUqkqdmI1k7libK

# Pandas is a library that is used for data cleaning and analysis
# Arrays=Series, matrices=dataframes in pandas
# index uniquely identifies rows and columns
# []
# label index is for row
# .ix(.loc) Indexer
import numpy as np
import pandas as pd
from pandas import Series, DataFrame
series_obj=Series(np.arange(10),index=["row1","row2","row3","row4","row5","row6","row7","row8","row9","row10"])
series_obj
series_obj["row7"]
series_obj[[0,7]]
#create a dataframe using random number generator
#reshape is for the number of rows and columns
np.random.seed(1234)
DF_obj=DataFrame(np.random.rand(36).reshape((6,6)),index=["row1","row2","row3","row4","row5","row6"],
columns=["column1","column2","column3","column4","column5","column6"])
DF_obj
DF_obj.loc[["row2","row5"],["column2","column5"]]
#data sclicing
series_obj["row2":"row6"]
#comparing with scalars
#scalar is a single numerical value
DF_obj<.5
#filtering with scalars
series_obj[series_obj>6]
#setting values with scalars
series_obj["row1","row5","row8"]=8
series_obj
#treating missing values
# by default missing values are represented by NaN
# if the dataset has 0s, 99s, 999s be sure to treat them as you would do for missing values
import numpy as np,
import pandas as pd
from pandas import Series, DataFrame
# figuraing out what is missing
missing=np.nan
series_obj=Series(["row1","row2",missing,"row4","row5",missing,"row7","row8","row9","row10"])
series_obj
series_obj.isnull()
#filling in for missing values
np.random.seed(1234)
DF_obj=DataFrame(np.random.rand(36).reshape(6,6))
DF_obj
DF_obj.loc[3:5,0]=missing
DF_obj.loc[1:4,5]=missing
DF_obj
filled_DF=DF_obj.fillna(0)
filled_DF
filled_DF=DF_obj.fillna({0:0.1,5:1.25})
filled_DF
fill_DF=DF_obj.fillna(method="ffill")
fill_DF
DF_obj.isnull().sum()
#Filtering missing values
DF_no_NaN=DF_obj.dropna(axis=1)
DF_no_NaN
DF_obj.dropna(how="all")
#removing duplicates using matplotlib
DF_obj=DataFrame({"column1":[1,1,2,2,3,3,3],
                  "column2":["a","a","b","b","c","c","c"],
                  "column3":["A","A","B","B","C","C","C"]})
DF_obj
DF_obj.duplicated()
#false means not duplicate
#drop a duplicate row
DF_obj.drop_duplicates()
#drop duplicate column
DF_obj=DataFrame({"column1":[1,1,2,2,3,3,3],
                  "column2":["a","a","b","b","c","c","c"],
                  "column3":["A","A","B","B","C","D","C"]})
DF_obj
DF_obj.drop_duplicates(["column3"])
#concatenating and sorting data
import numpy as np
import pandas as pd
from pandas import Series, DataFrame
DF_obj=pd.DataFrame(np.arange(36).reshape(6,6))
DF_obj
DF_obj_2=pd.DataFrame(np.arange(15).reshape(5,3))
DF_obj_2
#concatenating data
pd.concat([DF_obj,DF_obj_2],axis=1)
pd.concat([DF_obj,DF_obj_2])
#dropping data
DF_obj.drop([0,2],axis=1)
#adding data
series_obj=Series(np.arange(6))
series_obj.name="added_variable"
series_obj
variable_added=DataFrame.join(DF_obj,series_obj)
variable_added
#append method
added_datatable=variable_added.append(variable_added,ignore_index=False)
added_datatable
added_datatable=variable_added.append(variable_added,ignore_index=True)
added_datatable
#sorting data
DF_sorted=DF_obj.sort_values(by=[5],ascending=[False])
DF_sorted


